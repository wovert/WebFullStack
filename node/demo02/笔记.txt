原生NodeJS：
1.服务器基本结构：解析数据(get,post)、响应静态资源(fs)
2.

--------------------------------------------------------------------------------

1.FILE数据
2.数据库

--------------------------------------------------------------------------------

file上传，也是post

表单的三种POST：
1.text/plain                                            用的很少，纯文字
2.application/x-www-form-urlencoded       默认          url编码方式，xxx=xxx&xxx=xx...
3.multipart/form-data                     上传文件内容

--------------------------------------------------------------------------------

------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="user"

blue
------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="pass"

asdfasdf
------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="f1"; filename="a.txt"
Content-Type: text/plain

aaa
bbb
ccccccc
------WebKitFormBoundaryDqs4grRjEIPy5ZmY--

--------------------------------------------------------------------------------

<分隔符>
Content-Disposition: form-data; name="user"

blue
<分隔符>
Content-Disposition: form-data; name="pass"

asdfasdf
<分隔符>
Content-Disposition: form-data; name="f1"; filename="a.txt"
Content-Type: text/plain

aaa
bbb
ccccccc
<分隔符>--

--------------------------------------------------------------------------------

<分隔符>\r\n
Content-Disposition: form-data; name="user"\r\n
\r\n
blue\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="pass"\r\n
\r\n
asdfasdf\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="f1"; filename="a.txt"\r\n
Content-Type: text/plain\r\n
\r\n
<文件内容>\r\n
<分隔符>--

--------------------------------------------------------------------------------

<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n
<分隔符>--

--------------------------------------------------------------------------------

解析数据：

1.用"<分隔符>"切开数据
[
  空,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,
  --\r\n
]

2.丢弃头尾元素
[
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,
]

3.丢弃每一项的头尾\r\n
[
  数据描述\r\n\r\n数据值,
  数据描述\r\n\r\n数据值,
  数据描述1\r\n数据描述2\r\n\r\n<文件内容>,
]

4.用第一次出现的"\r\n\r\n"切分
  普通数据：[数据描述, 数据值]
  或
  文件数据：[数据描述1\r\n数据描述2, <文件内容>]

5.判断描述的里面有没有"\r\n"
  有——文件数据：[数据描述1\r\n数据描述2, <文件内容>]
  没有——普通数据：[数据描述, 数据值]

6.分析"数据描述"

--------------------------------------------------------------------------------

对Buffer数据进行：
1.查找    indexOf()
2.截取    slice(s, e)     [s, ..., e-1]
          slice(s)
3.切分    split

--------------------------------------------------------------------------------

uuid、guid

--------------------------------------------------------------------------------

npm => Node Package Manager

npm install -g cnpm --registry=https://registry.npm.taobao.org

--------------------------------------------------------------------------------

npm/cnpm

cnpm init

--------------------------------------------------------------------------------

get/post/file

--------------------------------------------------------------------------------

瑕疵：
1.现在：会等到所有数据都到达了才开始处理
  更好：收到一部分就解析一部分          极大节约内存
2.fs.readFile
  fs.writeFile

--------------------------------------------------------------------------------

http.createServer((req, res)=>{
  fs.readFile(`www${req.url}`, (err, data)=>{
    res.write(data);
  });
});

readFile先把所有数据全读到内存中，然后回调：
1.极其占用内存
2.资源利用极其不充分

--------------------------------------------------------------------------------

流：
读一点、发一点

--------------------------------------------------------------------------------

流：
1.读取流     fs.createReadStream、req
2.写入流     fs.createWriteStream、res
3.读写流     压缩、加密

--------------------------------------------------------------------------------

1.POST的File数据
2.流、gz

--------------------------------------------------------------------------------

1.数据库
2.缓存
3.多进程服务器

4.接口、做东西

--------------------------------------------------------------------------------

流的底层原理是不是还是readfile？


                ╭═══════════════╮
                ║         吾爱程序猿论坛       ║
  ╭══════┤     www.52programer.com      ├═══════╮
  ║            ║  专注于优质IT教程收集与分享  ║              ║
  ║            ╰═══════════════╯              ║
　║                                                            ║
  ║                                                            ║
　║    说明：本站仅为资源分享的平台，教程、软件、程序等均      ║
　║          来自于互联网及网友分享，版权归原作者所有,         ║ 
　║  	      站内资源仅供参考和学习之用，不得用于商业用途，    ║
　║          下载后请在24小时内自行删除。本站不承担任何        ║
　║          技术及版权问题。                                  ║
  ║                                                            ║
  ║     1.请遵守中华人民共和国相关法律、条例。                 ║
  ║     2.本站提供的各类教程、文章及软件等，只可研究学习，     ║
  ║       本站对使用这些工具（教程）而导致的一切后果，不承担   ║
  ║       任何责任。                                           ║
  ║     3.本站不保证提供的资源十分安全或是完全可用，请下载后   ║
  ║       自行检查。                                           ║
  ║     4.如不同意以上声明，请立即删除，不要使用，谢谢合作。   ║
  ║                                                            ║
  ║    ╭───────────────────────╮      ║
  ╰══┤  吾爱程序猿论坛         版权所有 禁止盗用    ├══╯
        ╰───────────────────────╯ 

  ────────────────────────────────
             新闻 网页 贴吧 知道 MP3 图片 视频

      ┏━━━━━━━━━━━━━━━┑┌─────┒
      ┃          吾爱程序猿论坛        │ 百度一下 ┃
      ┖───────────────┘┕━━━━━┛

  ────────────────────────────────

 ╭══════════════════════════════╮
 ║  吾爱程序猿论坛专注于优质IT教程收集与分享。收集整理的都是  ║
 ║  网上最新最有价值的IT教程、精品源码以及完整系统的学习资料。║
 ║  让大家在学习的道路上少走弯路，少花冤枉钱，帮助大家真真正  ║
 ║  正学到技术!                                               ║
 ║  只要有大家的支持，我们会做得更好！                        ║
 ║                                                            ║
 ║                  www.52programer.com                       ║
 ╰══════════════════════════════╯  

              吾爱程序猿论坛官网:www.52programer.com

              默认解压密码:www.52programer.com